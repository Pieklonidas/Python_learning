From sentdex (https://www.youtube.com/channel/UCfzlCWGWYyIQ0aLC5w48gBQ)

Episodes 1-2

import matplotlib.pyplot as plt

x = [1, 2, 3]
y = [5, 7, 4]

x2 = [1, 2, 3]
y2 = [10, 14, 12]

plt.plot(x, y, label='First Line')
plt.plot(x2, y2, label='Second Line')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.show()

Episode 3

import matplotlib.pyplot as plt

# bars
# x = [2, 4, 6, 8, 10]
# y = [6, 7, 8, 2, 4]
#
# x2 = [1, 3, 5, 7, 9]
# y2 = [7, 8, 2, 4, 2]
#
# plt.bar(x, y, label='Bars1', color='r')
# plt.bar(x2, y2, label='Bars2', color='c')

# 23
population_ages = [22, 55, 62, 45, 21, 22, 34, 42, 42, 4, 99, 102, 110, 120, 121, 122, 130, 111, 115, 112, 80, 75, 65]

# ids = [x for x in range(len(population_ages))]

bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130]

plt.hist(population_ages, bins, histtype='bar', rwidth=0.8)

plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
# plt.legend()
plt.show()

Episode 4

import matplotlib.pyplot as plt

x = [1, 2, 3, 4, 5, 6, 7, 8]
y = [5, 2, 4, 2, 1, 4, 5, 2]

plt.scatter(x, y, label='skitscat', color='k', marker='*', s=100)

plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.show()

Episode 5

import matplotlib.pyplot as plt

days = [1, 2, 3, 4, 5]
sleeping = [7, 8, 6, 11, 7]
eating = [2, 3, 4, 3, 2]
working = [7, 8, 7, 2, 2]
playing = [8, 5, 7, 8, 13]

plt.plot([], [], color='m', label='Sleeping', linewidth=5)
plt.plot([], [], color='c', label='Eating', linewidth=5)
plt.plot([], [], color='r', label='Working', linewidth=5)
plt.plot([], [], color='k', label='Playing', linewidth=5)

plt.stackplot(days, sleeping, eating, working, playing, colors=['m', 'c', 'r', 'k'])

plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.show()

Episode 6

import matplotlib.pyplot as plt

days = [1, 2, 3, 4, 5]

sleeping = [7, 8, 6, 11, 7]
eating = [2, 3, 4, 3, 2]
working = [7, 8, 7, 2, 2]
playing = [8, 5, 7, 8, 13]

slices = [7, 2, 2, 13]
activities = ['sleeping', 'eating', 'working', 'playing']
cols = ['c', 'm', 'r', 'b']

plt.pie(slices,
        labels=activities,
        colors=cols,
        startangle=90,
        shadow=True,
        explode=(0, 0.1, 0, 0),
        autopct='%1.1f%%'
        )

# plt.xlabel('x')
# plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
# plt.legend()
plt.show()

Episode 7

import matplotlib.pyplot as plt
import numpy as np
# Part 1
'''
import csv

x = []
y = []

with open('example.TXT', 'r') as csvfile:
    plots = csv.reader(csvfile, delimiter=',')
    for row in plots:
        x.append(int(row[0]))
        y.append(int(row[1]))

plt.plot(x, y, label='Loaded from file!')
'''

x, y = np.loadtxt('example.TXT', delimiter=',', unpack=True)
plt.plot(x, y, label='Loaded from file!')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.show()

Episodes 8-9

import matplotlib.pyplot as plt
import urllib.request as urq
import matplotlib.dates as mdates
import numpy as np


def bytespdate2num(fmt, encoding='utf-8'):
    def bytesconverter(b):
        s = b.decode(encoding)
        return mdates.datestr2num(s)
    return bytesconverter


def graph_data(stock):

    stock_price_url = 'https://pythonprogramming.net/yahoo_finance_replacement'
    source_code = urq.urlopen(stock_price_url).read().decode()
    stock_data = []
    split_source = source_code.split('\n')
    split_source = split_source[1:]
    for line in split_source:
        split_line = line.split(',')
        if len(split_line) == 6:
            if 'values' not in line and 'labels' not in line:
                stock_data.append(line)

    date, closep, highp, lowp, openp, volume = np.loadtxt(stock_data,
                                                          delimiter=',',
                                                          unpack=True,
                                                          converters={0: bytespdate2num('%Y%m%d')})
    plt.plot_date(date, closep)

    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title('Interesting Graph\nCheck it out')
    plt.legend()
    plt.show()


graph_data('TSLA')

Episode 10

import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax1 = plt.subplot2grid((1, 1), (0, 0))

x, y = np.loadtxt('example.TXT', delimiter=',', unpack=True)

for label in ax1.xaxis.get_ticklabels():
    label.set_rotation(45)

ax1.grid(True, color='g', linestyle='-', linewidth=5)

ax1.plot(x, y, label='Loaded from file!')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.subplots_adjust(left=0.09, bottom=0.18, right=0.94, top=0.9, wspace=0.2, hspace=0)
plt.show()

Episode 11

import matplotlib.pyplot as plt
import numpy as np
import datetime as dt

fig = plt.figure()
ax1 = plt.subplot2grid((1, 1), (0, 0))

x, y = np.loadtxt('unix_time.txt', delimiter=',', unpack=True)

dateconv = np.vectorize(dt.datetime.fromtimestamp)
x = dateconv(x)
print(x)
for label in ax1.xaxis.get_ticklabels():
    label.set_rotation(45)

ax1.grid(True)

ax1.plot(x, y, label='Loaded from file!')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.subplots_adjust(left=0.09, bottom=0.18, right=0.94, top=0.9, wspace=0.2, hspace=0)
plt.show()

Episode 12

import matplotlib.pyplot as plt
import numpy as np
import datetime as dt

fig = plt.figure()
ax1 = plt.subplot2grid((1, 1), (0, 0))

x, y = np.loadtxt('unix_time.txt', delimiter=',', unpack=True)

dateconv = np.vectorize(dt.datetime.fromtimestamp)
x = dateconv(x)
ax1.plot(x, y, label='Loaded from file!')
ax1.fill_between(x, y, 300, where=(y > 300), facecolor='green', alpha=0.3, label='gain')
ax1.fill_between(x, y, 300, where=(y < 300), facecolor='red', alpha=0.3, label='loss')
for label in ax1.xaxis.get_ticklabels():
    label.set_rotation(45)

ax1.grid(True)
ax1.xaxis.label.set_color('c')
ax1.yaxis.label.set_color('r')
ax1.set_yticks([100, 350, 750, 1000])

plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.subplots_adjust(left=0.12, bottom=0.18, right=0.94, top=0.9, wspace=0.2, hspace=0)
plt.show()

Episode 13

import matplotlib.pyplot as plt
import numpy as np
import datetime as dt

fig = plt.figure()
ax1 = plt.subplot2grid((1, 1), (0, 0))

x, y = np.loadtxt('unix_time.txt', delimiter=',', unpack=True)

dateconv = np.vectorize(dt.datetime.fromtimestamp)
x = dateconv(x)
ax1.plot(x, y, label='Loaded from file!')
ax1.axhline(300, color='k', linewidth=5)
ax1.fill_between(x, y, 300, where=(y > 300), facecolor='green', alpha=0.3, label='gain')
ax1.fill_between(x, y, 300, where=(y < 300), facecolor='red', alpha=0.3, label='loss')
for label in ax1.xaxis.get_ticklabels():
    label.set_rotation(45)

ax1.grid(True)
# ax1.xaxis.label.set_color('c')
# ax1.yaxis.label.set_color('r')
ax1.set_yticks([100, 350, 750, 1000])
ax1.spines['left'].set_color('c')
ax1.spines['right'].set_visible(False)
ax1.spines['top'].set_visible(False)
ax1.spines['left'].set_linewidth(5)

ax1.tick_params(axis='x', colors='#f06215')

plt.xlabel('x')
plt.ylabel('y')
plt.title('Interesting Graph\nCheck it out')
plt.legend()
plt.subplots_adjust(left=0.12, bottom=0.18, right=0.94, top=0.9, wspace=0.2, hspace=0)
plt.show()

episode 16

import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib import style

plt.style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1)

def animate(i):
    graph_data = open('samplefile.txt', 'r').read()
    lines = graph_data.split('\n')
    xs = []
    ys = []
    for line in lines:
        if len(line) > 1:
            x, y = line.split(',')
            xs.append(float(x))
            ys.append(float(y))
    ax1.clear()
    ax1.plot(xs, ys)


ani = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()

episodes 17-18

import matplotlib.pyplot as plt
import numpy as np

x, y = np.loadtxt('samplefile.txt', delimiter=',', unpack=True)
fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1)
ax1.plot(x, y)

bbox_props = dict(boxstyle='larrow', fc='w', ec='k', lw=1)
ax1.annotate(str(y[-1]), (x[-1], y[-1]),
             xytext=(x[-1]+0.5, y[-1]), bbox=bbox_props)

# # Annotation example with arrow
# ax1.annotate('Big News!', (x[5], y[5]),
#              xytext=(0.8, 0.9), textcoords='axes fraction',
#              arrowprops=dict(color='grey'))
# # Font dict example
# font_dict = {
#             'family': 'serif',
#             'color': 'darkred',
#             'size': 15}
# # Hard coded text
# ax1.text(4, 4, 'Text example', fontdict=font_dict)
plt.subplots_adjust(left=0.09, bottom=0.20, right=0.90, top=0.90, wspace=0.2, hspace=0)
plt.show()

episode 19

import random
import matplotlib.pyplot as plt

fig = plt.figure()

def create_plots():
    xs = []
    ys = []
    for i in range(10):
        x = i
        y = random.randrange(10)
        xs.append(x)
        ys.append(y)
    return xs, ys


ax1 = plt.subplot2grid((6, 1), (0, 0), rowspan=1, colspan=1)
ax2 = plt.subplot2grid((6, 1), (1, 0), rowspan=4, colspan=1)
ax3 = plt.subplot2grid((6, 1), (5, 0), rowspan=1, colspan=1)

# # add subplot syntax:
# ax1 = fig.add_subplot(2, 2, 1)
# ax2 = fig.add_subplot(2, 2, 2)
# ax3 = fig.add_subplot(2, 1, 2)

x, y = create_plots()
ax1.plot(x, y)

x, y = create_plots()
ax2.plot(x, y)

x, y = create_plots()
ax3.plot(x, y)

plt.show()

Episodes 26-27

from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt

m = Basemap(projection='mill',
            llcrnrlat=-90,
            llcrnrlon=-180,
            urcrnrlat=90,
            urcrnrlon=180,
            resolution='l')

m.drawcoastlines()
m.drawcountries(linewidth=2)
m.drawstates(color='b')
# m.drawcounties(color='r')
# m.fillcontinents()
# m.etopo()
# m.bluemarble()

plt.title('Basemap tutorial')
plt.show()

episode 28

from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt

m = Basemap(projection='mill',
            llcrnrlat=25,
            llcrnrlon=-130,
            urcrnrlat=50,
            urcrnrlon=-60,
            resolution='l')

m.drawcoastlines()
m.drawcountries(linewidth=2)
m.drawstates(color='b')

xs = []
ys = []

NYClat, NYClon = 40.7127, -74.0059

xpt, ypt = m(NYClon, NYClat)
xs.append(xpt)
ys.append(ypt)

m.plot(xpt, ypt, 'c*', markersize=15)

LAlat, LAlon = 34.05, -118.25

xpt, ypt = m(LAlon, LAlat)
xs.append(xpt)
ys.append(ypt)

m.plot(xpt, ypt, 'g^', markersize=15)

m.plot(xs, ys, linewidth=3, color='r', label='Flight 98')
m.drawgreatcircle(NYClon, NYClat, LAlon, LAlat, color='c', linewidth=3, label='arc')

plt.legend(loc=4)

plt.title('Basemap tutorial')
plt.show()
